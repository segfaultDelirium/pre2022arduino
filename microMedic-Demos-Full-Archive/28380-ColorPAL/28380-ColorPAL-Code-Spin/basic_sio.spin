'' Copyright (c) 2008 Philip C. Pilgrim'' (See end of file for terms of use.)''''-----------[ Description ]----------------------------------------------------'''' This Propeller object provides buffered serial receive and unbuffered serial'' transmit on either a single pin or a pair of pins. Pins can be either open'' drain or bipolar-driven, mark-high (normal) or mark-low (inverted).''''-----------[ Revision History ]-----------------------------------------------'''' 2009.12.9: Added output break capability and method.''''-----------[ Program ]--------------------------------------------------------CON  buf_size      = 512    OPEN          = 1 << 31  INVERTED      = 1 << 30VAR  long  out_invert, out_open, xbaud, one_ms  word  enqueue, dequeue  byte  buffer[buf_size]  byte  receiving, transmitting, same_pin, out_pin, out_busy, out_breakPUB start'' Simplifed start routine for Propeller Backpack's 3-pin interface.  return start_explicit(27, 27, 9600 | OPEN) PUB start_explicit(rx_pin, tx_pin, baudrate)'' rx_pin:   Pin number for receive data. -1 to disable receive.'''' tx_pin:   Pin number for transmit data. -1 to disable transmit.'''' baudrate: Actual baudrate in bps. Can be ORed with OPEN for''           open-drain mode with a pull-up/pull-down and/or''           INVERTED for mark-low polarity.'''' rx_pin and tx_pin can be the same if OPEN is asserted.'''' ------------------------- VERY IMPORTANT --------------------------'''' On receive, if a break condition (low for normal, high for INVERTED)'' exceeds 800_000 clocks, the entire chip is reset. This provides a'' way to effect an external reset without requiring access to the'' /RST pin.'''' --------------------------------------------------------------------  stop  inp_mask := 1 << rx_pin  transmitting := (tx_pin => 0)  out_pin := tx_pin  same_pin := rx_pin == tx_pin  xbaud := (baud := clkfreq / (baudrate & constant(!(OPEN | INVERTED))))  one_ms := clkfreq / 1000  flags := baudrate & constant(OPEN | INVERTED)  out_invert := (flags & INVERTED) <> 0  out_open := (flags & OPEN) <> 0  xmtbusy := @out_busy  xmtbreak := @out_break  if (tx_pin => 0)    if (out_open)      dira[tx_pin]~      outa[tx_pin] := out_invert    else      outa[tx_pin] := !out_invert      dira[tx_pin]~~  enqueue~  dequeue~  if (rx_pin < 0)    return true  elseif (rx_pin <> tx_pin or out_open)    return (receiving := cognew(@ser_inp, @enqueue) + 1) > 0  else    return 0    PUB stop'' Halt both transmitting and receiving operations.    if (transmitting)    dira[out_pin]~    transmitting~  if (receiving)    cogstop(receiving - 1)    receiving~    return truePUB flush'' Flushes input buffer.  dequeue := enqueue  return true    PUB inbytes'' Return the number of bytes waiting in the input queue.  return enqueue - dequeue - buf_size * (enqueue < dequeue)PUB in : rxbyte'' Return the next byte from the input queue. Blocks if no'' bytes are waiting.  if (not receiving)    return 0  repeat while (enqueue == dequeue)  rxbyte := buffer[dequeue]  dequeue := (dequeue + 1) // buf_sizePUB str(stringptr) | char'' Send a string to the serial output.  repeat strsize(stringptr)    out(byte[stringptr++])PUB out(txbyte) | timer'' Send a byte to the serial output. If the byte value is > 255,'' assume it's a string address and proceed with str.  if (txbyte > 255)    str(txbyte)  elseif (transmitting)    txbyte := ((txbyte | $300) << 2) ^ out_invert ^ out_open    out_busy := same_pin    timer := cnt    if (out_open)      repeat 11        waitcnt(timer += xbaud)        dira[out_pin] := ((txbyte >>= 1) & 1)    else      repeat 11        waitcnt(timer += xbaud)        outa[out_pin] := ((txbyte >>= 1) & 1)    out_busy~PUB break(time_ms) | brk_sig'' Send a break signal for time_ms. If time_ms < 0, set break on,'' and leave it on. If time_ms == 0, turn break off.  brk_sig := (time_ms == 0) ^ out_invert ^ out_open  out_break := (out_busy := same_pin & (time_ms <> 0))  if (out_open)    dira[out_pin] := brk_sig  else    outa[out_pin] := brk_sig  if (time_ms > 0)    waitcnt(time_ms * one_ms + cnt)    if (out_open)      dira[out_pin] := !brk_sig    else      outa[out_pin] := !brk_sig    out_break~    out_busy~       DATser_inp       mov       acc,par                 'Get enqueue index address.              mov       enqaddr,acc              add       acc,#2              mov       deqaddr,acc             'Get dequeue index address.              add       acc,#2              mov       bufaddr,acc             'Get buffer address.              test      flags,invert wc         'Carry flag is invert flag.start_bit        if_nc waitpeq   _0,inp_mask             'Wait for io pin to go low.        if_c  waitpne   _0,inp_mask              mov       time,baud               'Get bit time.              shr       time,#1                 'Divide by 2 to move to center of bit.              add       time,cnt                'Compute cnt value for center of bit.              waitcnt   time,baud               'Wait for center of bit.              test      inp_mask,ina wz         'Is it still zero?    if_z_eq_c jmp       #start_bit              '  No:  Go back and try again.                      mov       bitcnt,#9               '  Yes: Got start bit, so 9 more bits, including stop bit.              :bitlp        shr       acc,#1                  'Shift bits right.              waitcnt   time,baud               'Wait for center of next bit.              test      inp_mask,ina wz         'Test io pin.     if_nc    muxnz     acc,#$100               'Copy nz to bit 8 of acc.     if_c     muxz      acc,#$100              djnz      bitcnt,#:bitlp          'Back for next bit.              tjnz      acc,#serin_done         'Is acc (all 8 bits + stop bit) zero?              mov       time,break_thld         '  Yes: Framing error; maybe break. Set break threshold.              rdbyte    addr,xmtbreak wz        '       Currently transmitting a break?        if_nz mov       time,#0                 '         Yes: Okay, just wait for it to finish, then.                            :breaklp      test      inp_mask,ina wz         '       io pin raise before break timeout?    if_z_eq_c jmp       #serin_done             '         Yes: Buffer the zero byte.                      djnz      time,#:breaklp          '         No:  Keep checking.              clkset    reset                   '       Break, so reboot.        serin_done    rdbyte    addr,xmtbusy wz         'Is the receive byte the echo of a transmit byte on the same pin?        if_nz jmp       #start_bit              '  Yes: Ignore it.              mov       addr,bufaddr            'Byte is okay, so get buffer address.              add       addr,enq                'Add enqueue index.                     wrbyte    acc,addr                'Write byte to buffer.              mov       acc,enq                 'Get enqueue index.              add       acc,#1                  'Increment it.              cmp       acc,buflen wz           'Does it point past end of buffer?        if_z  mov       acc,#0                  '  Yes: Reset it to zero.              rdword    deq,deqaddr             'Get the dequeue index.              cmp       acc,deq wz              'Is it equal to new enqueue index?        if_nz wrword    acc,enqaddr             '  No: Enqueue index is okay, so write it to enqaddr        if_nz mov       enq,acc                 '        and to local pointer (otherwise, leave as-is).              jmp       #start_bit              'Back for another character._0            long      0break_thld    long      50_000reset         long      $80enq           long      0buflen        long      buf_sizeinvert        long      INVERTEDbaud          long      0-0inp_mask      long      0-0flags         long      0-0xmtbusy       long      0-0xmtbreak      long      0-0time          res       1acc           res       1bitcnt        res       1deq           res       1addr          res       1enqaddr       res       1deqaddr       res       1bufaddr       res       1''-----------[ TERMS OF USE ]---------------------------------------------------'''' Permission is hereby granted, free of charge, to any person obtaining a copy of'' this software and associated documentation files (the "Software"), to deal in'' the Software without restriction, including without limitation the rights to use,'' copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the'' Software, and to permit persons to whom the Software is furnished to do so,'' subject to the following conditions: '''' The above copyright notice and this permission notice shall be included in all'' copies or substantial portions of the Software. '''' THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,'' INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A'' PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT'' HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION'' OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE'' SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.